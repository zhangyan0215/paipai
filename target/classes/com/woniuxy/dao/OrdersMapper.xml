<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.woniuxy.dao.OrdersMapper">
	<resultMap id="BaseResultMap"
		type="com.woniuxy.domain.Orders">
		<id column="oid" jdbcType="INTEGER" property="oid" />
		<result column="proid" jdbcType="INTEGER" property="proid" />
		<result column="uid" jdbcType="INTEGER" property="uid" />
		<result column="price" jdbcType="DOUBLE" property="price" />
		<result column="datetime" jdbcType="TIMESTAMP"
			property="datetime" />
		<result column="pay" jdbcType="DOUBLE" property="pay" />
		<result column="limit_time" jdbcType="TIMESTAMP"
			property="limitTime" />
		<result column="paytime" jdbcType="TIMESTAMP"
			property="paytime" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value"
										item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value"
										item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		oid, proid, uid, price, datetime, pay, limit_time, paytime
	</sql>
	<select id="selectByExample"
		parameterType="com.woniuxy.domain.OrdersExample"
		resultMap="BaseResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from orders
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey"
		parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from orders
		where oid = #{oid,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey"
		parameterType="java.lang.Integer">
		delete from orders
		where oid = #{oid,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample"
		parameterType="com.woniuxy.domain.OrdersExample">
		delete from orders
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.woniuxy.domain.Orders">
		insert into orders (oid,
		proid, uid,
		price, datetime, pay,
		limit_time, paytime)
		values
		(#{oid,jdbcType=INTEGER}, #{proid,jdbcType=INTEGER},
		#{uid,jdbcType=INTEGER},
		#{price,jdbcType=DOUBLE},
		#{datetime,jdbcType=TIMESTAMP}, #{pay,jdbcType=DOUBLE},
		#{limitTime,jdbcType=TIMESTAMP}, #{paytime,jdbcType=TIMESTAMP})
	</insert>
	<insert id="insertSelective"
		parameterType="com.woniuxy.domain.Orders">
		insert into orders
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="oid != null">
				oid,
			</if>
			<if test="proid != null">
				proid,
			</if>
			<if test="uid != null">
				uid,
			</if>
			<if test="price != null">
				price,
			</if>
			<if test="datetime != null">
				datetime,
			</if>
			<if test="pay != null">
				pay,
			</if>
			<if test="limitTime != null">
				limit_time,
			</if>
			<if test="paytime != null">
				paytime,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="oid != null">
				#{oid,jdbcType=INTEGER},
			</if>
			<if test="proid != null">
				#{proid,jdbcType=INTEGER},
			</if>
			<if test="uid != null">
				#{uid,jdbcType=INTEGER},
			</if>
			<if test="price != null">
				#{price,jdbcType=DOUBLE},
			</if>
			<if test="datetime != null">
				#{datetime,jdbcType=TIMESTAMP},
			</if>
			<if test="pay != null">
				#{pay,jdbcType=DOUBLE},
			</if>
			<if test="limitTime != null">
				#{limitTime,jdbcType=TIMESTAMP},
			</if>
			<if test="paytime != null">
				#{paytime,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>
	<select id="countByExample"
		parameterType="com.woniuxy.domain.OrdersExample"
		resultType="java.lang.Long">
		select count(*) from orders
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update orders
		<set>
			<if test="record.oid != null">
				oid = #{record.oid,jdbcType=INTEGER},
			</if>
			<if test="record.proid != null">
				proid = #{record.proid,jdbcType=INTEGER},
			</if>
			<if test="record.uid != null">
				uid = #{record.uid,jdbcType=INTEGER},
			</if>
			<if test="record.price != null">
				price = #{record.price,jdbcType=DOUBLE},
			</if>
			<if test="record.datetime != null">
				datetime = #{record.datetime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.pay != null">
				pay = #{record.pay,jdbcType=DOUBLE},
			</if>
			<if test="record.limitTime != null">
				limit_time = #{record.limitTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.paytime != null">
				paytime = #{record.paytime,jdbcType=TIMESTAMP},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update orders
		set oid = #{record.oid,jdbcType=INTEGER},
		proid =
		#{record.proid,jdbcType=INTEGER},
		uid = #{record.uid,jdbcType=INTEGER},
		price = #{record.price,jdbcType=DOUBLE},
		datetime =
		#{record.datetime,jdbcType=TIMESTAMP},
		pay =
		#{record.pay,jdbcType=DOUBLE},
		limit_time =
		#{record.limitTime,jdbcType=TIMESTAMP},
		paytime =
		#{record.paytime,jdbcType=TIMESTAMP}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective"
		parameterType="com.woniuxy.domain.Orders">
		update orders
		<set>
			<if test="proid != null">
				proid = #{proid,jdbcType=INTEGER},
			</if>
			<if test="uid != null">
				uid = #{uid,jdbcType=INTEGER},
			</if>
			<if test="price != null">
				price = #{price,jdbcType=DOUBLE},
			</if>
			<if test="datetime != null">
				datetime = #{datetime,jdbcType=TIMESTAMP},
			</if>
			<if test="pay != null">
				pay = #{pay,jdbcType=DOUBLE},
			</if>
			<if test="limitTime != null">
				limit_time = #{limitTime,jdbcType=TIMESTAMP},
			</if>
			<if test="paytime != null">
				paytime = #{paytime,jdbcType=TIMESTAMP},
			</if>
		</set>
		where oid = #{oid,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey"
		parameterType="com.woniuxy.domain.Orders">
		update orders
		set proid = #{proid,jdbcType=INTEGER},
		uid =
		#{uid,jdbcType=INTEGER},
		price = #{price,jdbcType=DOUBLE},
		datetime =
		#{datetime,jdbcType=TIMESTAMP},
		pay = #{pay,jdbcType=DOUBLE},
		limit_time = #{limitTime,jdbcType=TIMESTAMP},
		paytime =
		#{paytime,jdbcType=TIMESTAMP}
		where oid = #{oid,jdbcType=INTEGER}
	</update>


	<select id="findOrdersWithProductAndUsers" resultMap="rm">
		SELECT * FROM orders o JOIN users u
		ON o.uid = u.uid
		JOIN product p
		ON o.proid = p.proid
	</select>
	<resultMap type="com.woniuxy.domain.Orders" id="rm">
		<id property="oid" column="oid"/>
		<result property="proid" column="proid"/>
		<result property="uid" column="uid"/>
		<result property="price" column="price"/>
		<result property="datetime" column="datetime"/>
		<result property="pay" column="pay"/>
		<result property="limitTime" column="limit_time"/>
		<result property="paytime" column="paytime"/>
		<association property="users" javaType="com.woniuxy.domain.Users">
			<id property="uid" column="uid"/>
			<result property="username" column="username"/>
			<result property="password" column="password"/>
			<result property="salt" column="salt"/>
			<result property="photo" column="photo"/>
			<result property="status" column="status"/>
		</association>
		<association property="product" javaType="com.woniuxy.domain.Product">
			<id property="proid" column="proid"/>
			<result property="pname" column="pname"/>
			<result property="startPrice" column="startPrice"/>
			<result property="startTime" column="startTime"/>
			<result property="endTime" column="endTime"/>
			<result property="looktimes" column="looktimes"/>
			<result property="photo" column="photo"/>
			<result property="status" column="status"/>
			<result property="cid" column="cid"/>
			<result property="aid" column="aid"/>
			<result property="addmoney" column="addmoney"/>
			<result property="uid" column="uid"/>
		</association>
	</resultMap>
</mapper>